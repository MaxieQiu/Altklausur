Software Engineering – Use Cases Summary
Prof. Dr. Reiner Hähnle | Fachgebiet Software Engineering | 31 October 2025

===============================================================================
Page 1
- Title: Use Cases in Software Engineering (软件工程中的用例)
- Affiliation: FG Software Engineering (Fachgebiet Software Engineering)

===============================================================================
Page 2–3
- Core distinction: "What?" vs "How?"
  • What? → Problem Space (问题空间): 
      - Customer/Client (客户) asks: “What system do I want?” “What am I willing to pay?”
  • How? → Solution Space (解决方案空间): 
      - Developer asks: “How to build it?”

- Requirements Analysis (需求分析 / “Anforderungen”):
    • Perspective: Client (客户视角)
    • Focus: Desired functionality and operational constraints (期望功能与操作约束)
    • Stated declaratively (以声明式方式表达)

- Use Case Analysis (用例分析 / “Anwendungsfälle”):
    • Perspective: User (用户视角)
    • Focus: Anticipated interaction sequences → Scenarios (预期交互序列 / 场景)
    • Stated operationally (以操作式方式描述)

- Validation (验证): “Did we build the intended system?” (我们是否构建了预期的系统？)

===============================================================================
Page 5
- User involvement is essential (用户参与至关重要):
    • “Impossible to write good/complete use cases without user involvement.”

- Common misconception (常见误解):
    • Software cost ≈ development cost → False!
    • Must include manufacturing and maintenance costs.

- Budget recommendation:
    • Allocate 30–50% of development budget to client side (客户侧)
    • For: Requirements/Use Case Analysis + Validation (需求/用例分析与验证)
    • Plus ongoing maintenance budget.

===============================================================================
Page 6
- The CaSh Case Study (CaSh 案例研究):
  Main Roles & Functionalities (derived during requirements analysis):
    • Customer (客户):
        - General Authentication (通用认证)
        - Check availability (检查可用性)
        - Request booking (请求预订)
        - Change booking (修改预订)
    • Administrator (管理员):
        - Add/change new cars, rental locations (增改车辆与租赁点)
    • Billing System (账单系统)
    • Service Person (服务人员):
        - Take out vehicle for service (将车辆送修)

===============================================================================
Page 7
- Text Story Example: “Change Existing Booking” (修改现有预订)
  Scenario (场景):
    1. Authenticated customer selects a booking to change.
    2. System displays booking details (including adjacent reservations).
    3. Customer can:
        - Change reserved duration (更改租期), or
        - Cancel reservation (取消预订).
    4. If new duration entered → system checks availability (检查可用性).
        - If available → records change.
        - If not → shows information message (信息消息), no change.
    5. If canceled → booking is removed (删除预订).
    6. Before any change → incurred cost displayed (显示费用) + confirmation requested (请求确认).
    7. After change → confirmation message sent to preferred contact (发送确认消息).

  Highlights:
    • Main success path (主成功路径)
    • Failure handling (失败处理)
    • Side effect control (副作用控制)

===============================================================================
Page 8
- Use Cases are:
    • Text stories used to discover and record requirements (用于发现和记录需求的文本故事)
    • Complement requirements analysis (补充需求分析)
    • Provide operational requirements as basis for system design (提供操作性需求作为设计基础)

- Important distinctions:
    • Use cases ≠ User Stories (用户故事) — latter from Agile Software Development (敏捷软件开发)
    • Use cases do NOT replace requirements analysis — they do not capture non-functional requirements (无法捕获非功能性需求)

===============================================================================
Page 9
- Constituents of Use Cases (用例组成要素):
    • Actor (“Akteur”): A person, computer system, or organization with behavior (具有行为的实体)
    • Primary Actor (主参与者): Initiates the use case; requests service from system (发起用例并请求服务)
    • Scenario (场景 / use case instance): Specific sequence of actions and interactions between actors and system
    • Use Case (用例): Collection of related success and failure scenarios describing how an actor uses the system to achieve a goal

===============================================================================
Page 10
- Kinds of Use Cases:
  1. White Box (“Transparent”) vs Black Box (白盒 vs 黑盒):
      • White Box: Shows internal interactions (展示内部交互)
      • Black Box: Only describes interactions with external actors (仅描述与外部参与者的交互) → Preferred
  2. Corporate (“geschäftlich”) vs System (企业级 vs 系统级):
      • Corporate Use Case: Describes business process (often without mentioning system)
      • System Use Case: Described with respect to the system under design
  - Default:
      • Corporate → usually white box
      • System → mostly black box

===============================================================================
Page 11
- Use Case Formats (用例格式):
    • Brief (“kurz”): Terse one-paragraph summary, usually main success scenario
    • Casual (“informell”): Informal paragraph format covering multiple scenarios (e.g., “Change Booking”)
    • Fully Dressed (“ausgearbeitet”): All steps and variations in detail + supporting sections

- Precision vs Accuracy:
    • Precision (“Detaillierungsgrad”): Level of detail (细节程度)
    • Accuracy (“Zutreffendheit”): Correctness given the level of detail (在给定细节下的正确性)

===============================================================================
Pages 12–13
- Template for Fully Dressed Use Case (完整式用例模板):

  Part I:
    • Use Case Name: Start with verb (e.g., “Accomplish this task”)
    • Scope (“Umfang”): Corporate / System (name) / Subsystem → defines system boundaries
    • Level (“Ebene”):
        - User Goal (用户目标): Elementary goal that produces value
        - Summary Goal (摘要目标): Context or table of contents for lower-level use cases
        - Subfunction (子功能): Reusable part of a user goal
    • Primary Actor: Who initiates the use case
    • Stakeholders and Interests (“Teilhaber”): Who cares? What do they want? (e.g., Customer, Company, Regulatory Agency)

  Part II – Guarantees:
    • Preconditions (“Vorbedingungen”): Must be true at start & worth telling (e.g., “User authenticated”)
    • Minimal Guarantee: Fewest promises if goal fails (e.g., “System logged all steps”)
    • Success Guarantee: Must be true on success & worth telling (satisfies stakeholder interests)

===============================================================================
Pages 14–16
- Part III – Scenarios:
    • Main Success Scenario: Numbered list of steps; first step = trigger
    • Extensions: Alternative/failure paths referenced by step (e.g., 2.a, 2.a.1…)
        - Format:
            2.a <condition>
            2.a.1 <step 1 of handling>
            2.a.2 <step 2 of handling> …

  Additional Sections:
    • Special Requirements: Related non-functional requirements
    • Technology and Data Variation List: Different I/O methods or data formats
    • Frequency of Occurrence: Influences testing & implementation timing
    • Miscellaneous: Open issues, etc.

===============================================================================
Pages 17–19
- Example: “List Available Cars” (列出可用汽车)

  Part I:
    • Name: List Available Cars
    • Scope: CaSh Booking Module
    • Level: User Goal
    • Primary Actor: CaSh Customer
    • Stakeholders:
        - Customer: Wants cars for given duration/location
        - Company: Wants accurate offer
    • Precondition: Customer is authenticated
    • Minimal Guarantee: No side effects
    • Success Guarantee: All matching cars displayed

  Part II – Main Success Scenario:
    1. Customer wants to know if suitable car exists
    2. Enters address or uses location service
    3. Enters reservation period
    4. System validates time period
    5. Selects car class
    6. System finds matching options
    7. Displays results

  Part III – Extensions:
    3.a End date ≤ start date → 3.a.1 Ask for non-empty period
    5.a Session times out → 5.a.1 Log out customer
    7.a No result → 
        7.a.1 Include one class higher/lower
        7.a.2 Include partial overlap
        7.a.3 Suggest increasing location distance

===============================================================================
Pages 20–21
- Guidelines for Developing Use Cases:
  • Proceed incrementally, top-down
  • Recommended workflow:
      1. List actors & their goals → 1st precision level
      2. Write stakeholders, trigger, main success scenario → 2nd level
      3. Identify ALL failure conditions
      4. Write failure handling (do NOT mix with step 3!)

  Early Writing Tips:
    • Keep user interface out → Focus on intent (聚焦意图)
    • Write terse use cases (简洁)
    • Write black box use cases:
        ✓ “The system records the booking.”
        ✗ “The system writes to a database.”
    • Take actor-goal perspective: What outcome is valuable to the actor?
    • Good use cases may take weeks to write.

===============================================================================
Pages 22–24
- Valid Use Case = Elementary Business Process (EBP) (基本业务过程)
  EBP Criteria:
    • Performed by one stakeholder
    • In one place at one time
    • Well-defined task
    • Adds measurable business value
    • Leaves data in consistent state

  Examples:
    • “Negotiate a supplier contract” → ✗ (too complex)
    • “Handle returned sale” → ✓ (EBP)
    • “Log in” → ✗ (usually sub-use case, no direct business value)
    • “Move piece on game board” → ✗ (single step, fails size test)

===============================================================================
Pages 25–28
- UML Use Case Diagrams (UML 用例图):
  • UML = Unified Modeling Language: Visual, precise design notation
  • Elements:
      - System Boundary (系统边界)
      - Actors (参与者): stick figure or «actor» stereotype
      - Use Cases (用例): ellipses

  Characteristics:
    • Intentionally minimalist (有意极简)
    • Organizational tool → improves communication, reduces text duplication
    • No impact on system behavior or requirements
    • Black-box view
    • Helpful in early analysis
    • Unsuitable for fully dressed use cases

===============================================================================
Pages 29–34
- UML Relations:
  1. «include» Relation:
      • Factor out common behavior (提取共用行为)
      • Included use case always executed
      • Supports decomposition & reuse

  2. «extend» Relation:
      • Extends base use case under specific condition
      • Requires explicit extension points → breaks modularity
      • Most extensions are NOT EBP → should not be separate use cases
      • Must be well justified

  3. Use Case Inheritance:
      • DO NOT USE!
      • Premature design decision → causes clutter

===============================================================================
Page 35
- Final Remarks:
    • Biggest danger: Abusing use case diagrams for system design
    • Use cases belong to Problem Space (问题空间)
    • Document behavioral requirements (行为需求)
    • User involvement is essential
    • Granularity matters: Must be EBP, not single step
    • UML diagrams: best for early analysis
    • For fully dressed use cases: Use template, not diagrams
    • Stay simple; prefer black box

===============================================================================
Page 36
- Literature:
    • Alistair Cockburn, Writing Effective Use Cases, Addison-Wesley, 2016
    • Ian Sommerville, Software Engineering, 10th ed., Chap. 4.4, Pearson, 2015
    • Ulrike Hammerschall & Gerd Beneken, Software Requirements, Chap. 5, Pearson, 2013

===============================================================================
End of Summary