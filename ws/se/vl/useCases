《用例分析》（Use Case Analysis）详细讲解

1. 用例的目的：聚焦“做什么”而非“怎么做”｜第 2–3 页
软件工程中，需求分析的核心是区分：
- 问题空间（Problem Space）：用户/客户关心“系统要做什么”（What?）
- 解决方案空间（Solution Space）：开发团队关心“系统如何实现”（How?）
✅ 用例（Use Cases）属于问题空间，用于描述用户与系统之间的交互场景（scenarios），强调操作性需求（operational requirements），而非技术实现细节。
- 需求（Requirements）：通常以声明式（declarative）方式描述功能和约束，从客户视角出发。
- 用例（Use Cases）：以操作式（operational）方式描述用户目标达成的过程，从用户视角出发。

2. 用例的本质与作用｜第 5、8 页
- 用例是文本故事（text stories），用于发现和记录需求。
- 它们补充（complement）而非替代需求分析。
- 用例提供操作性需求，作为系统设计的基础。
- ⚠️ 用例 ≠ 用户故事（User Stories）：后者是敏捷开发中的轻量级需求表达，通常不包含失败路径或详细流程。
- ⚠️ 用例不涵盖非功能性需求（non-functional requirements），如性能、安全性等。

3. 用例的基本构成｜第 9 页
- 参与者（Actor）：与系统交互的实体，可以是人、其他系统或组织。
- 主参与者（Primary Actor）：发起用例、请求系统服务的参与者。
- 场景（Scenario / Use Case Instance）：一次具体的交互序列，即“一个故事”。
- 用例（Use Case）：一组相关的成功与失败场景，描述参与者如何通过系统达成目标。

4. 用例的类型｜第 10 页
（1）按交互粒度分：
- 黑盒用例（Black Box Use Cases）：
  - 仅描述系统与外部参与者的交互。
  - 不暴露内部结构，推荐用于系统级用例。
- 白盒用例（White Box / Transparent Use Cases）：
  - 描述系统内部组件间的交互。
  - 多用于详细设计阶段，不推荐在需求阶段使用。
（2）按范围分：
- 企业级用例（Corporate Use Cases）：
  - 描述业务流程，可能不涉及具体系统。
  - 通常是白盒的。
- 系统级用例（System Use Cases）：
  - 聚焦于被设计系统（system under design）的行为。
  - 几乎总是黑盒的。

5. 用例的格式（三种粒度）｜第 11 页
- 简要格式（Brief）：
  - 一段话总结主成功场景。
- 随意格式（Casual）：
  - 多段落描述多个场景（如“修改预订”示例）。
- 完整格式（Fully Dressed）：
  - 包含所有步骤、变体、前置条件、保证等详细信息。
💡 精确性（Precision）：描述的详细程度（粒度）。
💡 准确性（Accuracy）：在给定粒度下，描述是否正确。

6. 完整用例模板（Fully Dressed Use Case）｜第 12–16 页
（1）基本信息（第 12 页）
- 用例名称（Use Case Name）：以动词开头（如 “Change Booking”）。
- 范围（Scope）：企业、系统名或子系统。
- 层级（Level）：
  - 用户目标（User Goal）：基本价值单元（最重要）。
  - 摘要目标（Summary Goal）：多个用户目标的组合。
  - 子功能（Subfunction）：可复用的辅助步骤。
- 主参与者（Primary Actor）
- 利益相关者及其关注点（Stakeholders and Interests）
（2）保证条件（第 13 页）
- 前置条件（Preconditions）：用例开始前必须为真的条件（如“用户已认证”）。
- 最小保证（Minimal Guarantee）：即使失败，系统也必须做到的最低承诺（如“记录所有操作日志”）。
- 成功保证（Success Guarantee）：成功完成后必须满足的条件（如“显示所有可用汽车”）。
（3）场景描述（第 14、16 页）
- 主成功场景（Main Success Scenario）：
  - 编号步骤列表，描述达成目标的标准路径。
  - 第一步通常是触发器（trigger）。
- 扩展（Extensions）：
  - 描述替代路径或失败处理。
  - 格式：2.a 表示对主场景第 2 步的变体。
- 其他部分：
  - 特殊需求（Special Requirements）：相关的非功能性需求。
  - 技术与数据变体（Technology and Data Variation List）
  - 发生频率（Frequency of Occurrence）
  - 杂项（Miscellaneous）：如未决问题。

7. 用例开发指南｜第 20–21 页
推荐工作流程：
1. 列出所有参与者及其目标 → 得到功能需求初稿。
2. 为每个用例编写利益相关者、触发器和主成功场景 → 验证是否满足关键利益。
3. 识别所有失败条件（不要与处理逻辑混合）。
4. 编写失败处理逻辑。
写作建议：
- 早期阶段避免描述用户界面（Keep the user interface out）。
- 写黑盒用例：描述“系统做什么”，而非“如何做”。
  - ✅ “系统记录预订。”
  - ❌ “系统将预订写入数据库。”
- 从参与者目标出发：关注用户认为有价值的成果。
- 编写良好用例可能需要数周时间。

8. 有效用例的判断标准｜第 22–24 页
一个有效的用例应是一个基本业务过程（Elementary Business Process, EBP），满足：
1. 由单一利益相关者在单一地点、单一时间执行；
2. 模拟一个业务事件；
3. 提供可衡量的业务价值；
4. 使系统数据保持一致状态；
5. 不是场景中的单一步骤（通过“大小测试”）。
示例分析：
- “Negotiate a supplier contract” ❌ 太复杂，非 EBP。
- “Handle returned sale” ✅ 有效用例。
- “Log in” ❌ 通常是子用例，不直接提供业务价值。
- “Move piece on game board” ❌ 单一步骤，太小。

9. UML 用例图（Use Case Diagrams）｜第 25–28 页
- UML（Unified Modeling Language）是一种用于软件建模的可视化语言。
- 用例图（Use Case Diagram）包含：
  - 系统边界（System Boundary）
  - 参与者（Actors，用小人图标或 «actor» 标注）
  - 用例（椭圆）
- 用例图是极简主义（minimalist）的，主要用于：
  - 改善沟通与理解
  - 减少文本重复
- ⚠️ 用例图不影响系统行为或需求，仅用于组织。
- ⚠️ 不适合表示完整格式用例（Fully Dressed Use Cases）。

10. UML 用例关系｜第 29–34 页
（1）«include» 关系｜第 29–30 页
- 用于提取多个用例的公共行为。
- 被包含的用例总是执行。
- 示例：多个用例都包含“Cancel Booking”。
（2）«extend» 关系｜第 31–32 页
- 在特定条件下扩展基础用例的行为。
- 需要定义扩展点（Extension Points）。
- ⚠️ 破坏模块性，因为扩展用例需了解基础用例内部。
- ⚠️ 大多数扩展不符合 EBP，应谨慎使用。
（3）用例继承｜第 33 页
- 如 “Authenticate via Password” 继承 “Authenticate”。
- ⚠️ 不推荐使用：属于过早设计决策，使图混乱。

11. 总结与警示｜第 35 页
- 最大危险：将用例图用于系统设计（而非需求分析）。
- 用例属于问题空间，用于记录行为需求。
- 用户参与至关重要。
- 粒度要合适：必须是基本业务过程（EBP），而非单一步骤。
- 优先使用黑盒、简洁描述。
- 完整用例应使用模板文本，而非图表。
